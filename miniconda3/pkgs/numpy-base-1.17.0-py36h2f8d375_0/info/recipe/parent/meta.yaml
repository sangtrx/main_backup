{% set name = "numpy" %}
{% set version = "1.17.0" %}
{% set mkl_random_version = "1.0.4" %}
{% set mkl_random_buildnumber = 0 %}
{% set mkl_fft_version = "1.0.14" %}
{% set mkl_fft_buildnumber = 0 %}

package:
  name: numpy_and_dev
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.zip
    sha256: 951fefe2fb73f84c620bec4e001e80a80ddaa1b84dce244ded7f1e0cbe0ed34a
    patches:
      - 0001-fix-windows-case-sensitivity.patch
      - 0002-simplify-arch-flags.patch
      - 0003-Obtain-and-prefer-custom-gfortran-from-env-variable.patch
      - 0004-disable-memmap-filename-test-due-to-CI-link-confusio.patch
      - 0005-disable-broken-tests.patch
      - 0017-mark-known-failing-tests-on-ppc64le.patch
      - 0018-osx-disable-lto-for-ld-test.patch
  {% if blas_impl == "mkl" %}
  # because of the cyclical nature of numpy and mkl_fft/mkl_random, they all need to be built in this one recipe
  - url: https://github.com/IntelPython/mkl_random/archive/v{{mkl_random_version}}.tar.gz
    sha256: f328d76c30585e8ca63c7bced14185a0dc823bb27fbc11d05655c14fdabd46ed
    folder: mkl_random
  - url: https://github.com/IntelPython/mkl_fft/archive/v{{mkl_fft_version}}.tar.gz
    sha256: 644ed4d845b741f80c6576c94bdbd14d18fce21e6cc725676e979b7f953154a8
    folder: mkl_fft
  {% endif %}

build:
  number: 0
  skip: True  # [blas_impl == 'openblas' and win or py2k]
  force_use_keys:
    - python

outputs:
  # this one has all the actual contents
  - name: numpy-base
    script: install_base.sh   # [unix]
    script: install_base.bat  # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("fortran") }}
        # HACK: need this for libquadmath.  Should fix the gcc package
        - libgcc-ng                  # [linux]
      host:
        - cython
        - python
        - setuptools
        - mkl-devel  {{ mkl }}  # [blas_impl == "mkl"]
        - openblas-devel {{ openblas }}  # [blas_impl == "openblas"]
      run:
        - python
        - libgfortran  # [osx]

    test:
      commands:
        - test -e $SP_DIR/numpy/distutils/site.cfg     # [unix]
        - IF NOT EXIST %SP_DIR%\numpy\distutils\site.cfg exit 1  # [win]

  # devel exists mostly to add the run_exports info.
  - name: numpy-devel
    build:
      run_exports:
        - {{ pin_subpackage('numpy') }}
    requirements:
      host:
        - python
        # these import blas metapackages to ensure consistency with downstream libs that also use blas
        - mkl-devel  {{ mkl }}  # [blas_impl == 'mkl']
        - openblas-devel {{ openblas }}  # [blas_impl == 'openblas']
      run:
        - python
        - {{ pin_subpackage('numpy-base', exact=True) }}

  # metapackage for things that don't use numpy's C interface, or things
  - name: numpy
    requirements:
      build:
        # for runtime alignment
        - {{ compiler('c') }}
        - {{ compiler('fortran') }}
      host:
        - python
        # these import blas metapackages to ensure consistency with downstream libs that also use blas
        - mkl-devel  {{ mkl }}  # [blas_impl == 'mkl']
        - openblas-devel {{ openblas }}  # [blas_impl == 'openblas']
      run:
        - python
        - {{ pin_subpackage('numpy-base', exact=True) }}
        # openblas or mkl runtime included with run_exports
        - {{ pin_subpackage("mkl_fft") }}  # [blas_impl == 'mkl']
        - {{ pin_subpackage("mkl_random") }} # [blas_impl == 'mkl' and (not win or vc>=14)]
        - libgfortran  # [osx]

    test:
      script: numpy_test.py
      requires:
        - pytest
        - {{ compiler('c') }}
        - {{ compiler('fortran') }}
        - nomkl  # [x86 and blas_impl != 'mkl']
        - libgfortran  # [osx]

      commands:
        - f2py -h
        - python -c "import numpy; numpy.show_config()"
      imports:
        - numpy
        - numpy.linalg.lapack_lite

    about:
      home: http://numpy.scipy.org/
      license: BSD 3-Clause
      license_file: LICENSE.txt
      summary: 'Array processing for numbers, strings, records, and objects.'
      description: |
        NumPy is the fundamental package needed for scientific computing with Python.
      doc_url: https://docs.scipy.org/doc/numpy-{{ version }}/reference/
      dev_url: https://github.com/numpy/numpy
      dev_source_url: https://github.com/numpy/numpy/tree/master/doc

  {% if blas_impl == "mkl" %}
  - name: mkl_random
    version: {{ mkl_random_version }}
    script: install_mkl_extra.sh   # [not win]
    script: install_mkl_extra.bat  # [win]
    build:
        number: {{mkl_random_buildnumber}}
        # not compatible with vs2008.
        skip: True  # [blas_impl != "mkl" or (win and vc<14)]

    requirements:
        build:
          - {{ compiler('c') }}
          - {{ compiler('cxx') }}
        host:
          - python
          - setuptools
          - mkl-devel  {{ mkl }}
          - cython
          - numpy-base  {{ numpy }}
        run:
          - python
          - {{ pin_compatible("numpy-base") }}

    test:
        commands:
          - nosetests -v mkl_random
        requires:
          - nose
          - numpy-base >=1.13
        imports:
          - mkl_random
          - mkl_random.mklrand

    about:
        home: http://github.com/IntelPython/mkl_random
        license: BSD 3-Clause
        license_file: mkl_random/LICENSE.txt
        description:
            NumPy-based implementation of random number generation sampling using Intel (R) Math Kernel Library,
            mirroring numpy.random, but exposing all choices of sampling algorithms available in MKL.
        summary:
            Intel (R) MKL-powered package for sampling from common probability distributions into NumPy arrays.

  - name: mkl_fft
    version: {{ mkl_fft_version }}
    script: install_mkl_extra.sh   # [not win]
    script: install_mkl_extra.bat  # [win]
    source:
        url: https://github.com/IntelPython/mkl_fft/archive/v{{mkl_fft_version}}.tar.gz
        sha256: 3c7ed29e203c5b664ecafb11d767d62f9cae4aa56f9a95737e121192a66673bf

    build:
      number: {{ mkl_fft_buildnumber }}
      skip: True  # [blas_impl != "mkl"]

    requirements:
        build:
          - {{ compiler('c') }}
          - {{ compiler('cxx') }}
        host:
          - python
          - setuptools
          - mkl-devel  {{ mkl }}
          - cython
          - numpy-base  {{ numpy }}
        run:
          - python
          - {{ pin_compatible("numpy-base") }}

    test:
        commands:
          - nosetests -v mkl_fft
        requires:
          - nose
        imports:
          - mkl_fft
          - mkl_fft._numpy_fft
          - mkl_fft._scipy_fft

    about:
        home: http://github.com/IntelPython/mkl_fft
        license: BSD 3-Clause
        license_file: LICENSE.txt
        description:
            NumPy-based implementation of Fast Fourier Transform using Intel (R) Math Kernel Library.
            Supports in-place and out-of-place, 1D and ND complex FFT on arrays of single and double precision
            with arbitrary memory layout, so long as array strides are multiples of its itemsize.
        summary: NumPy-based implementation of Fast Fourier Transform using Intel (R) Math Kernel Library.
  {% endif %}

extra:
  recipe-maintainers:
    - jakirkham
    - msarahan
    - pelson
    - rgommers
    - ocefpaf
